diff --git a/./config.h b/../dmenu-p/config.h
index 1edb647..5d3b966 100644
--- a/./config.h
+++ b/../dmenu-p/config.h
@@ -1,18 +1,12 @@
 /* See LICENSE file for copyright and license details. */
 /* Default settings; can be overriden by command line. */
 
-static int topbar = 1;                      /* -b  option; if 0, dmenu appears at bottom     */
+static int topbar = 0;                      /* -b  option; if 0, dmenu appears at bottom     */
 /* -fn option overrides fonts[0]; default X11 font or font set */
 static const char *fonts[] = {
-	"monospace:size=10"
+	"dina:size=8"
 };
 static const char *prompt      = NULL;      /* -p  option; prompt to the left of input field */
-static const char *colors[SchemeLast][2] = {
-	/*     fg         bg       */
-	[SchemeNorm] = { "#bbbbbb", "#222222" },
-	[SchemeSel] = { "#eeeeee", "#005577" },
-	[SchemeOut] = { "#000000", "#00ffff" },
-};
 /* -l option; if nonzero, dmenu uses vertical list with given number of lines */
 static unsigned int lines      = 0;
 
@@ -21,3 +15,12 @@ static unsigned int lines      = 0;
  * for example: " /?\"&[]"
  */
 static const char worddelimiters[] = " ";
+static char *histfile          = "dmenuHist";
+static unsigned int maxhist    = 15;
+static int histnodup           = 1;	/* if 0, record repeated histories */
+
+/* colors sourced from Xresources values */
+#define NORFG "color15"
+#define NORBG "background"
+#define SELFG "foreground"
+#define SELBG "color8"
diff --git a/./dmenu b/../dmenu-p/dmenu
index 1f6f02e..a20693a 100755
Binary files a/./dmenu and b/../dmenu-p/dmenu differ
diff --git a/./dmenu.c b/../dmenu-p/dmenu.c
index d605ab4..e901f00 100644
--- a/./dmenu.c
+++ b/../dmenu-p/dmenu.c
@@ -31,6 +31,7 @@ struct item {
 	char *text;
 	struct item *left, *right;
 	int out;
+	int distance;
 };
 
 static char text[BUFSIZ] = "";
@@ -52,6 +53,17 @@ static XIC xic;
 static Drw *drw;
 static Clr *scheme[SchemeLast];
 
+static char *histfile;
+static char *histbuf, *histptr;
+static size_t histsz;
+
+static const char *colors[SchemeLast][2] = {
+	/*     fg         bg       */
+	[SchemeNorm] = { "", "" },
+	[SchemeSel] = { "", "" },
+	[SchemeOut] = { "#000000", "#00ffff" },
+};
+
 #include "config.h"
 
 static int (*fstrncmp)(const char *, const char *, size_t) = strncmp;
@@ -263,6 +275,84 @@ match(void)
 	calcoffsets();
 }
 
+static int
+compare_distance(const void *a, const void *b)
+{
+	struct item const *da = *(struct item **) a;
+	struct item const *db = *(struct item **) b;
+
+	if (!db)
+		return 1;
+	if (!da)
+		return -1;
+	return da->distance - db->distance;
+}
+
+static void
+fuzzymatch(void)
+{
+	struct item *item;
+	struct item **fuzzymatches = NULL;
+	char c;
+	int number_of_matches = 0, i, pidx, sidx, eidx;
+	int text_len = strlen(text), itext_len;
+
+	matches = matchend = NULL;
+
+	/* walk through all items */
+	for (item = items; item && item->text; item++) {
+		if (text_len) {
+			itext_len = strlen(item->text);
+			pidx = 0;
+			sidx = eidx = -1;
+			/* walk through item text */
+			for (i = 0; i < itext_len && (c = item->text[i]); i++) {
+				/* fuzzy match pattern */
+				if (text[pidx] == c) {
+					if (sidx == -1)
+						sidx = i;
+					pidx++;
+					if (pidx == text_len) {
+						eidx = i;
+						break;
+					}
+				}
+			}
+			/* build list of matches */
+			if (eidx != -1) {
+				/* compute distance */
+				/* factor in 30% of sidx and distance between eidx and total
+				 * text length .. let's see how it works */
+				item->distance = eidx - sidx + (itext_len - eidx + sidx) / 3;
+				appenditem(item, &matches, &matchend);
+				number_of_matches++;
+			}
+		}
+		else
+			appenditem(item, &matches, &matchend);
+	}
+
+	if (number_of_matches) {
+		/* initialize array with matches */
+		if (!(fuzzymatches = realloc(fuzzymatches, number_of_matches * sizeof(struct item*))))
+			die("cannot realloc %u bytes:", number_of_matches * sizeof(struct item *));
+		for (i = 0, item = matches; item && i < number_of_matches; i++, item = item->right)
+			fuzzymatches[i] = item;
+
+		/* sort matches according to distance */
+		qsort(fuzzymatches, number_of_matches, sizeof(struct item *), compare_distance);
+		/* rebuild list of matches */
+		matches = matchend = NULL;
+		for (i = 0, item = fuzzymatches[0]; i < number_of_matches && item && \
+				item->text; item = fuzzymatches[i], i++)
+			appenditem(item, &matches, &matchend);
+
+		free(fuzzymatches);
+	}
+	curr = sel = matches;
+	calcoffsets();
+}
+
 static void
 insert(const char *str, ssize_t n)
 {
@@ -273,7 +363,7 @@ insert(const char *str, ssize_t n)
 	if (n > 0)
 		memcpy(&text[cursor], str, n);
 	cursor += n;
-	match();
+	fuzzymatch();
 }
 
 static size_t
@@ -287,6 +377,105 @@ nextrune(int inc)
 	return n;
 }
 
+static void
+loadhistory(void)
+{
+	FILE *fp = NULL;
+	size_t sz;
+
+	if (!histfile)
+		return;
+	if (!(fp = fopen(histfile, "r")))
+		return;
+	fseek(fp, 0, SEEK_END);
+	sz = ftell(fp);
+	fseek(fp, 0, SEEK_SET);
+	if (sz) {
+		histsz = sz + 1 + BUFSIZ;
+		if (!(histbuf = malloc(histsz))) {
+			fprintf(stderr, "warning: cannot malloc %lu "\
+				"bytes", histsz);
+		} else {
+			histptr = histbuf + fread(histbuf, 1, sz, fp);
+			if (histptr <= histbuf) { /* fread error */
+				free(histbuf);
+				histbuf = NULL;
+				return;
+			}
+			if (histptr[-1] != '\n')
+				*histptr++ = '\n';
+			histptr[BUFSIZ - 1] = '\0';
+			*histptr = '\0';
+			histsz = histptr - histbuf + BUFSIZ;
+		}
+	}
+	fclose(fp);
+}
+
+static void
+navhistory(int dir)
+{
+	char *p;
+	size_t len = 0, textlen;
+
+	if (!histbuf)
+		return;
+	if (dir > 0) {
+		if (histptr == histbuf + histsz - BUFSIZ)
+			return;
+		while (*histptr && *histptr++ != '\n');
+		for (p = histptr; *p && *p++ != '\n'; len++);
+	} else {
+		if (histptr == histbuf)
+			return;
+		if (histptr == histbuf + histsz - BUFSIZ) {
+			textlen = strlen(text);
+			textlen = MIN(textlen, BUFSIZ - 1);
+			strncpy(histptr, text, textlen);
+			histptr[textlen] = '\0';
+		}
+		for (histptr--; histptr != histbuf && histptr[-1] != '\n';
+		     histptr--, len++);
+	}
+	len = MIN(len, BUFSIZ - 1);
+	strncpy(text, histptr, len);
+	text[len] = '\0';
+	cursor = len;
+	match();
+} 
+static void
+savehistory(char *str)
+{
+	unsigned int n, len = 0;
+	size_t slen;
+	char *p;
+	FILE *fp;
+
+	if (!histfile || !maxhist)
+		return;
+	if (!(slen = strlen(str)))
+		return;
+	if (histbuf && maxhist > 1) {
+		p = histbuf + histsz - BUFSIZ - 1; /* skip the last newline */
+		if (histnodup) {
+			for (; p != histbuf && p[-1] != '\n'; p--, len++);
+			n++;
+			if (slen == len && !strncmp(p, str, len)) {
+				return;
+			}
+		}
+		for (; p != histbuf; p--, len++)
+			if (p[-1] == '\n' && ++n + 1 > maxhist)
+				break;
+		fp = fopen(histfile, "w");
+		fwrite(p, 1, len + 1, fp);	/* plus the last newline */
+	} else {
+		fp = fopen(histfile, "w");
+	}
+	fwrite(str, 1, strlen(str), fp);
+	fclose(fp);
+}
+
 static void
 keypress(XKeyEvent *ev)
 {
@@ -318,7 +507,7 @@ keypress(XKeyEvent *ev)
 
 		case XK_k: /* delete right */
 			text[cursor] = '\0';
-			match();
+			fuzzymatch();
 			break;
 		case XK_u: /* delete left */
 			insert(NULL, 0 - cursor);
@@ -351,6 +540,8 @@ keypress(XKeyEvent *ev)
 		case XK_j: ksym = XK_Next;  break;
 		case XK_k: ksym = XK_Prior; break;
 		case XK_l: ksym = XK_Down;  break;
+		case XK_p: navhistory(-1); buf[0]=0; break;
+		case XK_n: navhistory(1); buf[0]=0; break;
 		default:
 			return;
 		}
@@ -426,6 +617,8 @@ keypress(XKeyEvent *ev)
 	case XK_KP_Enter:
 		puts((sel && !(ev->state & ShiftMask)) ? sel->text : text);
 		if (!(ev->state & ControlMask)) {
+			savehistory((sel && !(ev->state & ShiftMask))
+				    ? sel->text : text);
 			cleanup();
 			exit(0);
 		}
@@ -452,7 +645,7 @@ keypress(XKeyEvent *ev)
 		strncpy(text, sel->text, sizeof text - 1);
 		text[sizeof text - 1] = '\0';
 		cursor = strlen(text);
-		match();
+		fuzzymatch();
 		break;
 	}
 	drawmenu();
@@ -536,6 +729,39 @@ run(void)
 	}
 }
 
+static void
+recolor(void)
+{
+    size_t l = 0;
+    ssize_t nread;
+    char *line_buf = NULL;
+    FILE *fp = fopen("/home/cat/.Xresources", "r");
+    char norbg[8], norfg[8], selbg[8], selfg[8];
+
+    if (fp == NULL) {
+        fprintf(stderr, "failed to open Xresources\n");
+    }
+    while ((nread = getline(&line_buf, &l, fp)) != -1) {
+        if (norbg[0] != '#') {
+            sscanf(line_buf, "*." NORBG ": %7s", norbg);
+        } if (norfg[0] != '#') {
+            sscanf(line_buf, "*." NORFG ": %7s", norfg);
+        } if (selbg[0] != '#') {
+            sscanf(line_buf, "*." SELBG ": %7s", selbg);
+        } if (selfg[0] != '#') {
+            sscanf(line_buf, "*." SELFG ": %7s", selfg);
+        }
+    }
+    fclose(fp);
+
+
+    colors[SchemeNorm][ColFg] = norfg;
+    colors[SchemeNorm][ColBg] = norbg;
+    colors[SchemeSel][ColFg] = selfg;
+    colors[SchemeSel][ColBg] = selbg;
+}
+
+
 static void
 setup(void)
 {
@@ -604,7 +830,7 @@ setup(void)
 	}
 	promptw = (prompt && *prompt) ? TEXTW(prompt) - lrpad / 4 : 0;
 	inputw = MIN(inputw, mw/3);
-	match();
+	fuzzymatch();
 
 	/* create menu window */
 	swa.override_redirect = True;
@@ -636,7 +862,7 @@ setup(void)
 static void
 usage(void)
 {
-	fputs("usage: dmenu [-bfiv] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
+	fputs("usage: dmenu [-bfiv] [-H histfile] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
 	      "             [-nb color] [-nf color] [-sb color] [-sf color] [-w windowid]\n", stderr);
 	exit(1);
 }
@@ -644,6 +870,7 @@ usage(void)
 int
 main(int argc, char *argv[])
 {
+    recolor();
 	XWindowAttributes wa;
 	int i, fast = 0;
 
@@ -662,6 +889,8 @@ main(int argc, char *argv[])
 		} else if (i + 1 == argc)
 			usage();
 		/* these options take one argument */
+		else if (!strcmp(argv[i], "-H"))
+			histfile = argv[++i];
 		else if (!strcmp(argv[i], "-l"))   /* number of lines in vertical list */
 			lines = atoi(argv[++i]);
 		else if (!strcmp(argv[i], "-m"))
@@ -698,6 +927,7 @@ main(int argc, char *argv[])
 	if (!drw_fontset_create(drw, fonts, LENGTH(fonts)))
 		die("no fonts could be loaded.");
 	lrpad = drw->fonts->h;
+    loadhistory();
 
 	if (fast) {
 		grabkeyboard();
